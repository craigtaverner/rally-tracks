    {
      "name": "esql_basic_count_group_1",
      "operation-type": "raw-request",
      "method": "POST",
      "path": "/_query",
      "body": {
        "query": "FROM logs-* | STATS count=count(*) BY agent.version | SORT count DESC | LIMIT 20"
      }
    },
    {
      "name": "esql_basic_count_group_2",
      "operation-type": "raw-request",
      "method": "POST",
      "path": "/_query",
      "body": {
        "query": "FROM logs-* | STATS count=count(*) BY agent.version, agent.type | SORT count DESC | LIMIT 20"
      }
    },
    {
      "name": "esql_basic_count_group_3",
      "operation-type": "raw-request",
      "method": "POST",
      "path": "/_query",
      "body": {
        "query": "FROM logs-* | STATS count=count(*) BY agent.version, agent.type, agent.hostname | SORT count DESC | LIMIT 20"
      }
    },
    {
      "name": "esql_basic_count_group_4",
      "operation-type": "raw-request",
      "method": "POST",
      "path": "/_query",
      "body": {
        "query": "FROM logs-* | STATS count=count(*) BY agent.version, agent.type, agent.hostname, agent.id | SORT count DESC | LIMIT 20"
      }
    },
    {
      "name": "esql_time_range_and_date_histogram_two_groups_pre_filter",
      "operation-type": "raw-request",
      "method": "POST",
      "path": "/_query",
      "body": {
        "query": "FROM logs-* | EVAL start_time = DATE_PARSE(\"yyyy-MM-dd\",\"2020-01-01\"), end_time = DATE_PARSE(\"yyyy-MM-dd\",\"2020-01-02\") | WHERE @timestamp >= start_time AND @timestamp <= end_time AND http.response.body.bytes IS NOT NULL | EVAL bucket = DATE_TRUNC(1 hour, @timestamp) | STATS avg=AVG(http.response.body.bytes), min=MIN(http.response.body.bytes), max=MAX(http.response.body.bytes) BY data_stream.dataset, bucket | KEEP data_stream.dataset, bucket, min, avg, max"
      }
    },
    {
      "name": "esql_time_range_and_date_histogram_two_groups_post_filter",
      "operation-type": "raw-request",
      "method": "POST",
      "path": "/_query",
      "body": {
        "query": "FROM logs-* | EVAL start_time = DATE_PARSE(\"yyyy-MM-dd\",\"2020-01-01\"), end_time = DATE_PARSE(\"yyyy-MM-dd\",\"2020-01-02\") | WHERE @timestamp >= start_time AND @timestamp <= end_time | EVAL bucket = DATE_TRUNC(1 hour, @timestamp) | STATS avg=AVG(http.response.body.bytes), min=MIN(http.response.body.bytes), max=MAX(http.response.body.bytes) BY data_stream.dataset, bucket | WHERE min IS NOT NULL | KEEP data_stream.dataset, bucket, min, avg, max"
      }
    }
